# Transform back to probabilities
grid$prob <- 1 / (1 + exp(-grid$fit))
grid$upr_prob <- 1 / (1 + exp(-grid$upr))
grid$lwr_prob <- 1 / (1 + exp(-grid$lwr))
# Decision boundaries with confidence intervals
threshold <- 0.05  # Adjust threshold to capture more points
decision_boundary <- grid[abs(grid$prob - 0.5) < threshold, ]
decision_boundary_upr <- grid[abs(grid$upr_prob - 0.5) < threshold, ]
decision_boundary_lwr <- grid[abs(grid$lwr_prob - 0.5) < threshold, ]
ggplot(data, aes(x = x1, y = x2, color = as.factor(class))) +
geom_point(size = 2) +
labs(title = "Data and Estimated Logistic Regression Decision Boundary with 95% CI",
x = "X1", y = "X2") +
scale_color_manual(values = c("blue", "red"), name = "Class") +
geom_smooth(data = decision_boundary, aes(x = x1, y = x2), color = "black", linetype = "dashed", lwd = 1) +
geom_smooth(data = decision_boundary_upr, aes(x = x1, y = x2), color = "black", linetype = "dotted", lwd = 1) +
geom_smooth(data = decision_boundary_lwr, aes(x = x1, y = x2), color = "black", linetype = "dotted", lwd = 1) +
theme_minimal()
# Plot log-likelihood surface for beta1 and beta2
log_likelihood <- function(beta, x1, x2, y) {
log_odds <- beta[1] + beta[2] * x1 + beta[3] * x2
probs <- 1 / (1 + exp(-log_odds))
eps <- 1e-6
probs <- pmin(pmax(probs, eps), 1 - eps)
ll <- sum(y * log(probs) + (1 - y) * log(1 - probs))
return(-ll)  # Negative log-likelihood for minimization
}
plot_log_likelihood <- function(data, beta0, beta1_range, beta2_range) {
ll_values <- matrix(NA, nrow = length(beta1_range), ncol = length(beta2_range))
for (i in 1:length(beta1_range)) {
for (j in 1:length(beta2_range)) {
beta <- c(beta0, beta1_range[i], beta2_range[j])
ll_values[i, j] <- log_likelihood(beta, data$x1, data$x2, data$class)
}
}
plot_ly(x = ~beta1_range, y = ~beta2_range, z = ~ll_values, type = "surface",
colorscale = list(
c(0, 0.002, 0.004, 0.006, 0.008, 0.01, 0.02, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.8, 1),
c("darkblue", "blue", "cyan",
"green", "yellowgreen", "yellow",
"orange", "orangered", "red", "darkred",
"purple", "magenta", "pink",
"white", "grey", "black")
)) %>%
layout(title = "Log-Likelihood Surface",
scene = list(
xaxis = list(title = "Beta1"),
yaxis = list(title = "Beta2"),
zaxis = list(title = "Log-Likelihood")
))
}
# Define beta ranges
beta1_range <- seq(-20, 5, length.out = 200)
beta2_range <- seq(-20, 5, length.out = 200)
# Plot the log-likelihood surface for beta1 and beta2
plot_log_likelihood(data, beta0, beta1_range, beta2_range)
plot_log_likelihood(data, beta0, beta1_range, beta2_range)
ggplot(data, aes(x = x1, y = x2, color = as.factor(class))) +
geom_point(size = 2) +
labs(title = "Data and Estimated Logistic Regression Decision Boundary with 95% CI",
x = "X1", y = "X2") +
scale_color_manual(values = c("blue", "red"), name = "Class") +
geom_smooth(data = decision_boundary, aes(x = x1, y = x2), color = "black", linetype = "dashed", lwd = 1) +
geom_smooth(data = decision_boundary_upr, aes(x = x1, y = x2), color = "black", linetype = "dotted", lwd = 1) +
geom_smooth(data = decision_boundary_lwr, aes(x = x1, y = x2), color = "black", linetype = "dotted", lwd = 1) +
theme_minimal()
setwd("C:/Users/anthony/Desktop/Repositories/Github/ccb-hms/scDiagnostics")
setwd("C:/Users/anthony/Desktop/Repositories/Github/scDiagnosticsBioc2024Demo")
# Load necessary libraries
library(scDiagnostics)
library(scran)
library(scater)
pc_plot <- plotCellTypePCA(query_data = query_data,
reference_data = reference_data,
cell_types = c("CD4", "CD8", "B_and_plasma", "Myeloid"),
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:5)
pc_plot
knitr::opts_chunk$set(echo = TRUE)
pc_plot <- plotCellTypePCA(query_data = query_data,
reference_data = reference_data,
cell_types = c("CD4", "CD8", "B_and_plasma", "Myeloid"),
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:5)
pc_plot
knitr::opts_chunk$set(echo = TRUE)
pc_plot <- plotCellTypePCA(query_data = query_data,
reference_data = reference_data,
cell_types = c("CD4", "CD8", "B_and_plasma", "Myeloid"),
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:5)
pc_plot
View(pc_plot)
# Load necessary libraries
library(scDiagnostics)
library(scran)
library(scater)
knitr::knit_hooks$set(pngquant = knitr::hook_pngquant)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
dev = "ragg_png",
dpi = 72,
fig.retina = 2,
fig.width = 10.6667,
fig.height = 3.3334,
fig.align = "center",
out.width = "100%",
pngquant = "--speed=1 --quality=1-10"
)
# Load necessary libraries
library(scDiagnostics)
library(scran)
library(scater)
# Load data
data("reference_data")
data("query_data")
# Load necessary libraries
library(scDiagnostics)
library(scran)
library(scater)
# Load necessary libraries
library(scDiagnostics)
library(scran)
library(scater)
# Load data
data("reference_data")
data("query_data")
# Load necessary libraries
library(scDiagnostics)
library(scran)
library(scater)
knitr::knit_hooks$set(pngquant = knitr::hook_pngquant)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
dev = "ragg_png",
dpi = 72,
fig.retina = 2,
fig.width = 10.6667,
fig.height = 3.3334,
fig.align = "center",
out.width = "100%",
pngquant = "--speed=1 --quality=1-10"
)
# Load necessary libraries
library(scDiagnostics)
library(scran)
library(scater)
# Load data
data("reference_data")
data("query_data")
# Subset data for CD4
reference_data_subset <- reference_data[, which(reference_data$expert_annotation == "CD4")]
query_data_subset <- query_data[, which(query_data$SingleR_annotation == "CD4")]
# Selecting highly variable genes
ref_top_genes <- getTopHVGs(reference_data_subset, n = 500)
query_top_genes <- getTopHVGs(query_data_subset, n = 500)
# Intersect the gene symbols to obtain common genes
common_genes <- intersect(ref_top_genes, query_top_genes)
reference_data_subset <- reference_data_subset[common_genes,]
query_data_subset <- query_data_subset[common_genes,]
# Run PCA
reference_data_subset <- runPCA(reference_data_subset)
query_data_subset <- runPCA(query_data_subset)
pc_plot <- plotCellTypePCA(query_data = query_data,
reference_data = reference_data,
cell_types = c("CD4", "CD8", "B_and_plasma", "Myeloid"),
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:5)
pc_plot
knitr::knit_hooks$set(pngquant = knitr::hook_pngquant)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
dev = "ragg_png",
dpi = 72,
fig.retina = 2,
fig.width = 8.6667,
fig.height = 3.3334,
fig.align = "center",
out.width = "100%",
pngquant = "--speed=1 --quality=1-10"
)
pc_plot <- plotCellTypePCA(query_data = query_data,
reference_data = reference_data,
cell_types = c("CD4", "CD8", "B_and_plasma", "Myeloid"),
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:5)
pc_plot
knitr::knit_hooks$set(pngquant = knitr::hook_pngquant)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
dev = "ragg_png",
dpi = 72,
fig.retina = 2,
fig.width = 8.6667,
fig.height = 5.3334,
fig.align = "center",
out.width = "100%",
pngquant = "--speed=1 --quality=1-10"
)
pc_plot <- plotCellTypePCA(query_data = query_data,
reference_data = reference_data,
cell_types = c("CD4", "CD8", "B_and_plasma", "Myeloid"),
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:5)
pc_plot
pc_boxplot <- boxplotPCA(query_data = query_data,
reference_data = reference_data,
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
cell_types = c("CD4", "CD8", "B_and_plasma", "Myeloid"),
pc_subset = 1:5)
pc_boxplot
mds <- plotCellTypeMDS(query_data = query_data,
reference_data = reference_data,
cell_types = c("CD4", "CD8", "B_and_plasma"),
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation")
mds
mds_plot <- plotCellTypeMDS(query_data = query_data,
reference_data = reference_data,
cell_types = c("CD4", "CD8", "B_and_plasma"),
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation")
mds_plot
comparePCA_plot <- comparePCA(query_data = query_data_subset,
reference_data = reference_data_subset,
cell_types = c("CD4", "CD8", "B_and_plasma"),
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation")
comparePCA_plot <- comparePCA(query_data = query_data_subset,
reference_data = reference_data_subset,
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:5)
comparePCA_plot
similarity_mat <- comparePCA(query_data = query_data_subset,
reference_data = reference_data_subset,
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:5)
plot(similarity_mat)
cor_matrix_avg <- calculateAveragePairwiseCorrelation(query_data = query_data,
reference_data = reference_data,
query_cell_type_col = "expert_annotation",
ref_cell_type_col = "expert_annotation",
cell_types = c("CD4", "CD8", "B_and_plasma"),
pc_subset = 1:5,
correlation_method = "spearman")
plot(cor_matrix_avg)
cor_matrix_avg <- calculateAveragePairwiseCorrelation(query_data = query_data,
reference_data = reference_data,
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
cell_types = c("CD4", "CD8", "B_and_plasma"),
pc_subset = 1:5,
correlation_method = "spearman")
plot(cor_matrix_avg)
cor_matrix_avg <- calculateAveragePairwiseCorrelation(query_data = query_data,
reference_data = reference_data,
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
cell_types = c("CD4", "CD8", "B_and_plasma"),
pc_subset = NULL,
correlation_method = "spearman")
plot(cor_matrix_avg)
cor_matrix_avg <- calculateAveragePairwiseCorrelation(query_data = query_data,
reference_data = reference_data,
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
cell_types = c("CD4", "CD8", "B_and_plasma"),
pc_subset = 1:5,
correlation_method = "spearman")
plot(cor_matrix_avg)
cor_matrix_avg <- calculateAveragePairwiseCorrelation(query_data = query_data,
reference_data = reference_data,
query_cell_type_col = "expert_annotation",
ref_cell_type_col = "expert_annotation",
cell_types = c("CD4", "CD8", "B_and_plasma"),
pc_subset = 1:5,
correlation_method = "spearman")
plot(cor_matrix_avg)
help("calculateNearestNeighborProbabilities")
nn_output <- calculateNearestNeighborProbabilities(query_data = query_data,
reference_data = reference_data,
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:5)
plot(nn_output)
knitr::knit_hooks$set(pngquant = knitr::hook_pngquant)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
dev = "ragg_png",
dpi = 72,
fig.retina = 2,
fig.width = 8.6667,
fig.height = 5.3334,
fig.align = "center",
out.width = "100%",
pngquant = "--speed=1 --quality=1-10"
)
nn_output <- calculateNearestNeighborProbabilities(query_data = query_data,
reference_data = reference_data,
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:5)
plot(nn_output)
nn_output <- calculateNearestNeighborProbabilities(query_data = query_data,
reference_data = reference_data,
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:5)
plot(nn_output)
nn_output <- calculateNearestNeighborProbabilities(query_data = query_data,
reference_data = reference_data,
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:5)
plot(nn_output)
regress_res <- regressPC(reference_data = reference_data,
query_data = query_data,
ref_cell_type_col = "expert_annotation",
query_cell_type_col = "expert_annotation",
pc_subset = 1:10)
plot(regress_res, plot_type = "r_squared")
plot(regress_res, plot_type = "p-value")
regress_res <- regressPC(reference_data = reference_data,
query_data = query_data,
ref_cell_type_col = "expert_annotation",
query_cell_type_col = "expert_annotation",
pc_subset = 1:15)
plot(regress_res, plot_type = "r_squared")
plot(regress_res, plot_type = "p-value")
regress_res <- regressPC(reference_data = reference_data,
query_data = query_data,
ref_cell_type_col = "expert_annotation",
query_cell_type_col = "SingleR_annotation",
pc_subset = 1:15)
plot(regress_res, plot_type = "r_squared")
plot(regress_res, plot_type = "p-value")
p_values <- calculateHotellingPValue(query_data = query_data,
reference_data = reference_data,
query_cell_type_col = "expert_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:5)
round(p_values, 5)
p_values <- calculateHotellingPValue(query_data = query_data,
reference_data = reference_data,
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:5)
round(p_values, 5)
var_imp <- calculateVarImpOverlap(reference_data = reference_data,
query_data = query_data,
ref_cell_type_col = "expert_annotation",
query_cell_type_col = "SingleR_annotation")
var_imp[["var_imp_comparison"]]
anomaly_output <- detectAnomaly(reference_data = reference_data,
query_data = query_data,
ref_cell_type_col = "expert_annotation",
query_cell_type_col = "SingleR_annotation",
pc_subset = 1:10,
n_tree = 500,
anomaly_treshold = 0.5)
plot(anomaly_output,
cell_type = "CD4",
pc_subset = 1:5,
data_type = c("query", "reference"))
anomaly_output <- detectAnomaly(reference_data = reference_data,
query_data = query_data,
ref_cell_type_col = "expert_annotation",
query_cell_type_col = "SingleR_annotation",
pc_subset = 1:5,
n_tree = 500,
anomaly_treshold = 0.5)
plot(anomaly_output,
cell_type = "CD4",
pc_subset = 1:5,
data_type = c("query", "reference"))
anomaly_output <- detectAnomaly(reference_data = reference_data,
query_data = query_data,
ref_cell_type_col = "expert_annotation",
query_cell_type_col = "SingleR_annotation",
pc_subset = 1:15,
n_tree = 500,
anomaly_treshold = 0.5)
plot(anomaly_output,
cell_type = "CD4",
pc_subset = 1:5,
data_type = c("query", "reference"))
anomaly_output <- detectAnomaly(reference_data = reference_data,
query_data = query_data,
ref_cell_type_col = "expert_annotation",
query_cell_type_col = "SingleR_annotation",
pc_subset = 1:15,
n_tree = 500,
anomaly_treshold = 0.5)
plot(anomaly_output,
cell_type = "CD4",
pc_subset = 1:15,
data_type = c("query", "reference"))
anomaly_output <- detectAnomaly(reference_data = reference_data,
query_data = query_data,
ref_cell_type_col = "expert_annotation",
query_cell_type_col = "SingleR_annotation",
pc_subset = 1:15,
n_tree = 500,
anomaly_treshold = 0.5)
plot(anomaly_output,
cell_type = "CD4",
pc_subset = 1:5,
data_type = c("query", "reference"))
anomaly_output <- detectAnomaly(reference_data = reference_data,
query_data = query_data,
ref_cell_type_col = "expert_annotation",
query_cell_type_col = "SingleR_annotation",
pc_subset = 1:15,
n_tree = 500,
anomaly_treshold = 0.75)
plot(anomaly_output,
cell_type = "CD4",
pc_subset = 1:5,
data_type = c("query", "reference"))
anomaly_output <- detectAnomaly(reference_data = reference_data,
query_data = query_data,
ref_cell_type_col = "expert_annotation",
query_cell_type_col = "SingleR_annotation",
pc_subset = 1:5,
n_tree = 500,
anomaly_treshold = 0.75)
plot(anomaly_output,
cell_type = "CD4",
pc_subset = 1:5,
data_type = c("query", "reference"))
anomaly_output <- detectAnomaly(reference_data = reference_data,
query_data = query_data,
ref_cell_type_col = "expert_annotation",
query_cell_type_col = "SingleR_annotation",
pc_subset = 1:5,
n_tree = 500,
anomaly_treshold = 0.6)
plot(anomaly_output,
cell_type = "CD4",
pc_subset = 1:5,
data_type = c("query", "reference"))
distance_data <- calculateCellDistances(query_data = query_data,
reference_data = reference_data,
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:10)
cd4_anomalies <- detectAnomaly(reference_data = reference_data,
query_data = query_data,
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:10,
n_tree = 500,
anomaly_treshold = 0.5)$CD4
cd4_top6_anomalies <- names(sort(cd4_anomalies$query_anomaly_scores, decreasing = TRUE)[1:6])
plot(distance_data, ref_cell_type = "CD4", cell_names = cd4_top6_anomalies)
plot(distance_data, ref_cell_type = "CD8", cell_names = cd4_top6_anomalies)
overlap_measures <- calculateCellDistancesSimilarity(query_data = query_data,
reference_data = reference_data,
cell_names = cd4_top6_anomalies,
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:10)
overlap_measures
pc_plot <- plotCellTypePCA(query_data = query_data,
reference_data = reference_data,
cell_types = c("CD4", "CD8", "B_and_plasma", "Myeloid"),
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:5)
pc_plot
pc_plot <- plotCellTypePCA(query_data = query_data,
reference_data = reference_data,
cell_types = c("CD4", "CD8", "B_and_plasma", "Myeloid"),
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:2)
pc_plot
pc_plot <- plotCellTypePCA(query_data = query_data,
reference_data = reference_data,
cell_types = c("CD4", "CD8", "B_and_plasma", "Myeloid"),
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:3)
pc_plot
pc_plot <- plotCellTypePCA(query_data = query_data,
reference_data = reference_data,
cell_types = c("CD4", "CD8"),
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:3)
pc_plot
pc_plot <- plotCellTypePCA(query_data = query_data,
reference_data = reference_data,
cell_types = c("CD4", "CD8", "B_and_plasma", "Myeloid"),
query_cell_type_col = "SingleR_annotation",
ref_cell_type_col = "expert_annotation",
pc_subset = 1:3)
pc_plot
